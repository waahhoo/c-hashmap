#+TITLE: Problem 3 hashmap_main application
# Set defaults including to use Valgrind off the bat for all tests.
#+TESTY: PREFIX="prob3"
#+TESTY: PROGRAM='./hashmap_main -echo'
#+TESTY: PROMPT='HM>'
#+TESTY: USE_VALGRIND=1

* start, print, quit
Starts the program, prints what should be an empty set, then issues
the quit command which should end the program

#+BEGIN_SRC sh
Hashmap Main
Commands:
  hashcode <key>   : prints out the numeric hash code for the given key (does not change the hash map)
  put <key> <val>  : inserts the given key/val into the hash map, overwrites existing values if present
  get <key>        : prints the value associated with the given key or NOT FOUND
  print            : shows contents of the hashmap ordered by how they appear in the table
  structure        : prints detailed structure of the hash map
  clear            : reinitializes hash map to be empty with default size
  save <file>      : writes the contents of the hash map the given file
  load <file>      : clears the current hash map and loads the one in the given file
  next_prime <int> : if <int> is prime, prints it, otherwise finds the next prime and prints it
  expand           : expands memory size of hashmap to reduce its load factor
  quit             : exit the program
HM> print
HM> quit
#+END_SRC

* hashcode and get w/ empty
Tests that the 'hashcode' command is present and working along with
checking that the 'get' command in the empty hash table gives back
nothing and causes hash_main to print 'NOT FOUND'. 
#+BEGIN_SRC sh
Hashmap Main
Commands:
  hashcode <key>   : prints out the numeric hash code for the given key (does not change the hash map)
  put <key> <val>  : inserts the given key/val into the hash map, overwrites existing values if present
  get <key>        : prints the value associated with the given key or NOT FOUND
  print            : shows contents of the hashmap ordered by how they appear in the table
  structure        : prints detailed structure of the hash map
  clear            : reinitializes hash map to be empty with default size
  save <file>      : writes the contents of the hash map the given file
  load <file>      : clears the current hash map and loads the one in the given file
  next_prime <int> : if <int> is prime, prints it, otherwise finds the next prime and prints it
  expand           : expands memory size of hashmap to reduce its load factor
  quit             : exit the program
HM> print
HM> hashcode a
97
HM> hashcode A
65
HM> hashcode Aa
24897
HM> hashcode apple
435611005025
HM> hashcode banana
107126708920674
HM> get a
NOT FOUND
HM> get Aa
NOT FOUND
HM> get apple
NOT FOUND
HM> get banana
NOT FOUND
HM> quit
#+END_SRC

* put single and get
Uses 'put' to place a single key/val pair in the hashmap and checks
that 'get' can retrieve it while still causing 'NOT FOUND' for other
keys.
#+BEGIN_SRC sh
Hashmap Main
Commands:
  hashcode <key>   : prints out the numeric hash code for the given key (does not change the hash map)
  put <key> <val>  : inserts the given key/val into the hash map, overwrites existing values if present
  get <key>        : prints the value associated with the given key or NOT FOUND
  print            : shows contents of the hashmap ordered by how they appear in the table
  structure        : prints detailed structure of the hash map
  clear            : reinitializes hash map to be empty with default size
  save <file>      : writes the contents of the hash map the given file
  load <file>      : clears the current hash map and loads the one in the given file
  next_prime <int> : if <int> is prime, prints it, otherwise finds the next prime and prints it
  expand           : expands memory size of hashmap to reduce its load factor
  quit             : exit the program
HM> print
HM> get apple
NOT FOUND
HM> put apple fruit
HM> get apple
FOUND: fruit
HM> get banana
NOT FOUND
HM> get apple
FOUND: fruit
HM> quit
#+END_SRC

* put 3 key/vals
Puts 3 key/val pairs in the hashmap and checks that printing works
correctly and that all 3 values can be retrieved with their keys.

#+BEGIN_SRC sh
Hashmap Main
Commands:
  hashcode <key>   : prints out the numeric hash code for the given key (does not change the hash map)
  put <key> <val>  : inserts the given key/val into the hash map, overwrites existing values if present
  get <key>        : prints the value associated with the given key or NOT FOUND
  print            : shows contents of the hashmap ordered by how they appear in the table
  structure        : prints detailed structure of the hash map
  clear            : reinitializes hash map to be empty with default size
  save <file>      : writes the contents of the hash map the given file
  load <file>      : clears the current hash map and loads the one in the given file
  next_prime <int> : if <int> is prime, prints it, otherwise finds the next prime and prints it
  expand           : expands memory size of hashmap to reduce its load factor
  quit             : exit the program
HM> put Kyle alive
HM> put Kenny dead
HM> put Stan alive
HM> print
        Kyle : alive
        Stan : alive
       Kenny : dead
HM> get Kyle
FOUND: alive
HM> get Kenny
FOUND: dead
HM> get Stan
FOUND: alive
HM> get Cartman
NOT FOUND
HM> get Token
NOT FOUND
HM> quit
#+END_SRC

* put with collisions
Puts a series of values in the hashmap some of which will map to the
same hash table indices. There is nothing in the test to indicate this
yet but internally, the code will need to handle adding values on to
linked lists which are attached to the array of entries.

#+BEGIN_SRC sh
Hashmap Main
Commands:
  hashcode <key>   : prints out the numeric hash code for the given key (does not change the hash map)
  put <key> <val>  : inserts the given key/val into the hash map, overwrites existing values if present
  get <key>        : prints the value associated with the given key or NOT FOUND
  print            : shows contents of the hashmap ordered by how they appear in the table
  structure        : prints detailed structure of the hash map
  clear            : reinitializes hash map to be empty with default size
  save <file>      : writes the contents of the hash map the given file
  load <file>      : clears the current hash map and loads the one in the given file
  next_prime <int> : if <int> is prime, prints it, otherwise finds the next prime and prints it
  expand           : expands memory size of hashmap to reduce its load factor
  quit             : exit the program
HM> put B 1
HM> put D 2
HM> put N 3
HM> print
           B : 1
           D : 2
           N : 3
HM> get B
FOUND: 1
HM> get D
FOUND: 2
HM> get N
FOUND: 3
HM> get C
NOT FOUND
HM> get I
NOT FOUND
HM> put A 4
HM> put C 5
HM> put I 6
HM> put X 7
HM> put W 8
HM> print
           A : 4
           B : 1
           C : 5
           W : 8
           D : 2
           N : 3
           I : 6
           X : 7
HM> get A
FOUND: 4
HM> get B
FOUND: 1
HM> get C
FOUND: 5
HM> get D
FOUND: 2
HM> get E
NOT FOUND
HM> get I
FOUND: 6
HM> get X
FOUND: 7
HM> get W
FOUND: 8
HM> get Z
NOT FOUND
HM> quit
#+END_SRC

* check -echo option

** Create Input Commands
#+BEGIN_QUOTE test-results/cmds.txt
put Kyle alive
put Kenny dead
put Stan alive
print
get Kyle
get Kenny
quit
#+END_QUOTE

** Check -echo Effect
Now check that -echo causes different output than a run without the
-echo option. Feed the input commands to hashmap_main via a unix
pipe. The output should differ as with -echo, commands are echoed on
the screen while without it, commands should not be echoed as would be
the case for true interactive work.

#+TESTY: program='bash -v'
#+TESTY: prompt='>>'
#+TESTY: use_valgrind=0

#+BEGIN_SRC sh
>> cat test-results/cmds.txt | ./hashmap_main > test-results/no-echo.tmp
>> cat test-results/cmds.txt | ./hashmap_main -echo > test-results/with-echo.tmp
>> diff -q test-results/no-echo.tmp test-results/with-echo.tmp
Files test-results/no-echo.tmp and test-results/with-echo.tmp differ
>> [[ "$?" != "0" ]] || echo './hashmap_main -echo has no effect on output'
>> echo End of test
End of test
#+END_SRC


# * structure on empty table
# Checks for presence of the 'structure' command and that it produces
# the correct output for an empty hashmap.
# #+BEGIN_SRC sh
# Hashmap Main
# Commands:
#   hashcode <key>   : prints out the numeric hash code for the given key (does not change the hash map)
#   put <key> <val>  : inserts the given key/val into the hash map, overwrites existing values if present
#   get <key>        : prints the value associated with the given key or NOT FOUND
#   print            : shows contents of the hashmap ordered by how they appear in the table
#   structure        : prints detailed structure of the hash map
#   clear            : reinitializes hash map to be empty with default size
#   save <file>      : writes the contents of the hash map the given file
#   load <file>      : clears the current hash map and loads the one in the given file
#   next_prime <int> : if <int> is prime, prints it, otherwise finds the next prime and prints it
#   expand           : expands memory size of hashmap to reduce its load factor
#   quit             : exit the program
# HM> structure
# item_count: 0
# table_size: 5
# load_factor: 0.0000
#   0 : 
#   1 : 
#   2 : 
#   3 : 
#   4 : 
# HM> quit
# #+END_SRC

* put 3 and show structure
First use of the 'structure' command to print the internal structure of
the hash table. Puts 3 key/val pairs into the hashmap and then shows
its structure.
#+BEGIN_SRC sh
Hashmap Main
Commands:
  hashcode <key>   : prints out the numeric hash code for the given key (does not change the hash map)
  put <key> <val>  : inserts the given key/val into the hash map, overwrites existing values if present
  get <key>        : prints the value associated with the given key or NOT FOUND
  print            : shows contents of the hashmap ordered by how they appear in the table
  structure        : prints detailed structure of the hash map
  clear            : reinitializes hash map to be empty with default size
  save <file>      : writes the contents of the hash map the given file
  load <file>      : clears the current hash map and loads the one in the given file
  next_prime <int> : if <int> is prime, prints it, otherwise finds the next prime and prints it
  expand           : expands memory size of hashmap to reduce its load factor
  quit             : exit the program
HM> put B 1
HM> put D 2
HM> put N 3
HM> print
           B : 1
           D : 2
           N : 3
HM> get B
FOUND: 1
HM> get D
FOUND: 2
HM> get N
FOUND: 3
HM> get C
NOT FOUND
HM> get I
NOT FOUND
HM> structure
item_count: 3
table_size: 5
load_factor: 0.6000
  0 : 
  1 : {(66) B : 1} 
  2 : 
  3 : {(68) D : 2} {(78) N : 3} 
  4 : 
HM> quit
#+END_SRC

* put overwrites
Uses 'put' on existing keys in the map to overwrite the value
associated with that key. hash_main should capture a return value and
print the message 'Overwriting previous key/val' when this occurs.

#+BEGIN_SRC sh
Hashmap Main
Commands:
  hashcode <key>   : prints out the numeric hash code for the given key (does not change the hash map)
  put <key> <val>  : inserts the given key/val into the hash map, overwrites existing values if present
  get <key>        : prints the value associated with the given key or NOT FOUND
  print            : shows contents of the hashmap ordered by how they appear in the table
  structure        : prints detailed structure of the hash map
  clear            : reinitializes hash map to be empty with default size
  save <file>      : writes the contents of the hash map the given file
  load <file>      : clears the current hash map and loads the one in the given file
  next_prime <int> : if <int> is prime, prints it, otherwise finds the next prime and prints it
  expand           : expands memory size of hashmap to reduce its load factor
  quit             : exit the program
HM> put B 1
HM> put D 2
HM> put N 3
HM> put A 4
HM> put C 5
HM> put I 6
HM> put X 7
HM> put W 8
HM> structure
item_count: 8
table_size: 5
load_factor: 1.6000
  0 : {(65) A : 4} 
  1 : {(66) B : 1} 
  2 : {(67) C : 5} {(87) W : 8} 
  3 : {(68) D : 2} {(78) N : 3} {(73) I : 6} {(88) X : 7} 
  4 : 
HM> put B 11
Overwriting previous key/val
HM> put I 66
Overwriting previous key/val
HM> put A 44
Overwriting previous key/val
HM> put W 88
Overwriting previous key/val
HM> structure
item_count: 8
table_size: 5
load_factor: 1.6000
  0 : {(65) A : 44} 
  1 : {(66) B : 11} 
  2 : {(67) C : 5} {(87) W : 88} 
  3 : {(68) D : 2} {(78) N : 3} {(73) I : 66} {(88) X : 7} 
  4 : 
HM> get B
FOUND: 11
HM> get D
FOUND: 2
HM> get I
FOUND: 66
HM> get W
FOUND: 88
HM> get X
FOUND: 7
HM> quit
#+END_SRC

* Larger Hash with Structure
Creates a large hash table and shows its structure.
#+BEGIN_SRC sh
Hashmap Main
Commands:
  hashcode <key>   : prints out the numeric hash code for the given key (does not change the hash map)
  put <key> <val>  : inserts the given key/val into the hash map, overwrites existing values if present
  get <key>        : prints the value associated with the given key or NOT FOUND
  print            : shows contents of the hashmap ordered by how they appear in the table
  structure        : prints detailed structure of the hash map
  clear            : reinitializes hash map to be empty with default size
  save <file>      : writes the contents of the hash map the given file
  load <file>      : clears the current hash map and loads the one in the given file
  next_prime <int> : if <int> is prime, prints it, otherwise finds the next prime and prints it
  expand           : expands memory size of hashmap to reduce its load factor
  quit             : exit the program
HM> put Kyle alive
HM> put Kenny dead
HM> put Stan alive
HM> print
        Kyle : alive
        Stan : alive
       Kenny : dead
HM> structure
item_count: 3
table_size: 5
load_factor: 0.6000
  0 : {(1701607755) Kyle : alive} 
  1 : {(1851880531) Stan : alive} 
  2 : {(521543771467) Kenny : dead} 
  3 : 
  4 : 
HM> put Cartman jerk
HM> put Timmy TIMMY!
HM> put MrGarrison odd
HM> put MrHat very-odd
HM> put Butters lovable
HM> put Chef disavowed
HM> print
        Kyle : alive
     Cartman : jerk
     Butters : lovable
        Stan : alive
       MrHat : very-odd
       Kenny : dead
  MrGarrison : odd
       Timmy : TIMMY!
        Chef : disavowed
HM> structure
item_count: 9
table_size: 5
load_factor: 1.8000
  0 : {(1701607755) Kyle : alive} {(31069370171154755) Cartman : jerk} {(32495402392778050) Butters : lovable} 
  1 : {(1851880531) Stan : alive} {(499848344141) MrHat : very-odd} 
  2 : {(521543771467) Kenny : dead} {(8316304022500241997) MrGarrison : odd} 
  3 : {(521526929748) Timmy : TIMMY!} 
  4 : {(1717921859) Chef : disavowed} 
HM> quit
#+END_SRC

* End of File EOF
No 'quit' command is used: checks whether the command processing is
checking for EOF to be returned during scanning and handled
appropriately to close down the hash application.
#+BEGIN_SRC sh
Hashmap Main
Commands:
  hashcode <key>   : prints out the numeric hash code for the given key (does not change the hash map)
  put <key> <val>  : inserts the given key/val into the hash map, overwrites existing values if present
  get <key>        : prints the value associated with the given key or NOT FOUND
  print            : shows contents of the hashmap ordered by how they appear in the table
  structure        : prints detailed structure of the hash map
  clear            : reinitializes hash map to be empty with default size
  save <file>      : writes the contents of the hash map the given file
  load <file>      : clears the current hash map and loads the one in the given file
  next_prime <int> : if <int> is prime, prints it, otherwise finds the next prime and prints it
  expand           : expands memory size of hashmap to reduce its load factor
  quit             : exit the program
HM> put Kyle alive
HM> put Kenny dead
HM> put Stan alive
HM> print
        Kyle : alive
        Stan : alive
       Kenny : dead
HM> get Kyle
FOUND: alive
#+TESTY_EOF:
HM> 
#+END_SRC

* clear Command
Checks that the 'clear' command is present and works properly. Will
detect any memory leaks which result from not correctly free()'ing the
data allocated in the hashmap on clearing it.

#+BEGIN_SRC sh
Hashmap Main
Commands:
  hashcode <key>   : prints out the numeric hash code for the given key (does not change the hash map)
  put <key> <val>  : inserts the given key/val into the hash map, overwrites existing values if present
  get <key>        : prints the value associated with the given key or NOT FOUND
  print            : shows contents of the hashmap ordered by how they appear in the table
  structure        : prints detailed structure of the hash map
  clear            : reinitializes hash map to be empty with default size
  save <file>      : writes the contents of the hash map the given file
  load <file>      : clears the current hash map and loads the one in the given file
  next_prime <int> : if <int> is prime, prints it, otherwise finds the next prime and prints it
  expand           : expands memory size of hashmap to reduce its load factor
  quit             : exit the program
HM> clear
HM> print
HM> structure
item_count: 0
table_size: 5
load_factor: 0.0000
  0 : 
  1 : 
  2 : 
  3 : 
  4 : 
HM> put Kyle alive
HM> put Kenny dead
HM> put Stan alive
HM> put Cartman jerk
HM> print
        Kyle : alive
     Cartman : jerk
        Stan : alive
       Kenny : dead
HM> structure
item_count: 4
table_size: 5
load_factor: 0.8000
  0 : {(1701607755) Kyle : alive} {(31069370171154755) Cartman : jerk} 
  1 : {(1851880531) Stan : alive} 
  2 : {(521543771467) Kenny : dead} 
  3 : 
  4 : 
HM> clear
HM> print
HM> structure
item_count: 0
table_size: 5
load_factor: 0.0000
  0 : 
  1 : 
  2 : 
  3 : 
  4 : 
HM> put Timmy TIMMY!
HM> put MrGarrison odd
HM> put MrHat very-odd
HM> put Butters lovable
HM> put Chef disavowed
HM> print
     Butters : lovable
       MrHat : very-odd
  MrGarrison : odd
       Timmy : TIMMY!
        Chef : disavowed
HM> structure
item_count: 5
table_size: 5
load_factor: 1.0000
  0 : {(32495402392778050) Butters : lovable} 
  1 : {(499848344141) MrHat : very-odd} 
  2 : {(8316304022500241997) MrGarrison : odd} 
  3 : {(521526929748) Timmy : TIMMY!} 
  4 : {(1717921859) Chef : disavowed} 
HM> clear
HM> print
HM> structure
item_count: 0
table_size: 5
load_factor: 0.0000
  0 : 
  1 : 
  2 : 
  3 : 
  4 : 
HM> 
#+END_SRC

* save command, 3 puts
Creates a small hashmap and then uses the 'save' command on it to
save the hashmap to disk. Then checks the contents of that file to
ensure it looks correct.

#+BEGIN_SRC sh
Hashmap Main
Commands:
  hashcode <key>   : prints out the numeric hash code for the given key (does not change the hash map)
  put <key> <val>  : inserts the given key/val into the hash map, overwrites existing values if present
  get <key>        : prints the value associated with the given key or NOT FOUND
  print            : shows contents of the hashmap ordered by how they appear in the table
  structure        : prints detailed structure of the hash map
  clear            : reinitializes hash map to be empty with default size
  save <file>      : writes the contents of the hash map the given file
  load <file>      : clears the current hash map and loads the one in the given file
  next_prime <int> : if <int> is prime, prints it, otherwise finds the next prime and prints it
  expand           : expands memory size of hashmap to reduce its load factor
  quit             : exit the program
HM> put A 1
HM> put E 2
HM> put C 3
HM> put D 4
HM> save test-results/put3.tmp
HM> quit
#+END_SRC

** File Contents put3.tmp
Shows the contents of the saved file to ensure they look appropriate.
#+TESTY: program='cat test-results/put3.tmp'
#+BEGIN_SRC sh
5 4
           A : 1
           C : 3
           D : 4
           E : 2
#+END_SRC

* save command, many puts
Checks that the save command works appropriately when a larger hashmap
is created with many 'put' commands.
#+BEGIN_SRC sh
Hashmap Main
Commands:
  hashcode <key>   : prints out the numeric hash code for the given key (does not change the hash map)
  put <key> <val>  : inserts the given key/val into the hash map, overwrites existing values if present
  get <key>        : prints the value associated with the given key or NOT FOUND
  print            : shows contents of the hashmap ordered by how they appear in the table
  structure        : prints detailed structure of the hash map
  clear            : reinitializes hash map to be empty with default size
  save <file>      : writes the contents of the hash map the given file
  load <file>      : clears the current hash map and loads the one in the given file
  next_prime <int> : if <int> is prime, prints it, otherwise finds the next prime and prints it
  expand           : expands memory size of hashmap to reduce its load factor
  quit             : exit the program
HM> put Kyle alive
HM> put Kenny dead
HM> put Stan alive
HM> put Cartman jerk
HM> put Timmy TIMMY!
HM> put MrGarrison odd
HM> put MrHat very-odd
HM> put Butters lovable
HM> put Chef disavowed
HM> print
        Kyle : alive
     Cartman : jerk
     Butters : lovable
        Stan : alive
       MrHat : very-odd
       Kenny : dead
  MrGarrison : odd
       Timmy : TIMMY!
        Chef : disavowed
HM> structure
item_count: 9
table_size: 5
load_factor: 1.8000
  0 : {(1701607755) Kyle : alive} {(31069370171154755) Cartman : jerk} {(32495402392778050) Butters : lovable} 
  1 : {(1851880531) Stan : alive} {(499848344141) MrHat : very-odd} 
  2 : {(521543771467) Kenny : dead} {(8316304022500241997) MrGarrison : odd} 
  3 : {(521526929748) Timmy : TIMMY!} 
  4 : {(1717921859) Chef : disavowed} 
HM> save test-results/put-many.tmp
#+TESTY_EOF:
HM> 
#+END_SRC

** File Contents put-many.tmp
Shows the contents of the saved file to ensure they look appropriate.
#+TESTY: program='cat test-results/put-many.tmp'
#+BEGIN_SRC sh
5 9
        Kyle : alive
     Cartman : jerk
     Butters : lovable
        Stan : alive
       MrHat : very-odd
       Kenny : dead
  MrGarrison : odd
       Timmy : TIMMY!
        Chef : disavowed
#+END_SRC

* load existing file
** Create file to load
Place the below text in the named file to create a file to load.
#+BEGIN_QUOTE test-results/sp.tmp
5 6
        Kyle : lonely
     Butters : drchaos
        Stan : in-love
        Eric : big-boned
       Kenny : rip
        Chef : disavowed
#+END_QUOTE

** Load file and show structure
Loads the freshly created file test-results/sp.tmp and shows the
structure that it has.
#+BEGIN_SRC sh
Hashmap Main
Commands:
  hashcode <key>   : prints out the numeric hash code for the given key (does not change the hash map)
  put <key> <val>  : inserts the given key/val into the hash map, overwrites existing values if present
  get <key>        : prints the value associated with the given key or NOT FOUND
  print            : shows contents of the hashmap ordered by how they appear in the table
  structure        : prints detailed structure of the hash map
  clear            : reinitializes hash map to be empty with default size
  save <file>      : writes the contents of the hash map the given file
  load <file>      : clears the current hash map and loads the one in the given file
  next_prime <int> : if <int> is prime, prints it, otherwise finds the next prime and prints it
  expand           : expands memory size of hashmap to reduce its load factor
  quit             : exit the program
HM> load test-results/sp.tmp
HM> print
        Kyle : lonely
     Butters : drchaos
        Stan : in-love
        Eric : big-boned
       Kenny : rip
        Chef : disavowed
HM> structure
item_count: 6
table_size: 5
load_factor: 1.2000
  0 : {(1701607755) Kyle : lonely} {(32495402392778050) Butters : drchaos} 
  1 : {(1851880531) Stan : in-love} 
  2 : {(1667854917) Eric : big-boned} {(521543771467) Kenny : rip} 
  3 : 
  4 : {(1717921859) Chef : disavowed} 
HM> get Eric
FOUND: big-boned
HM> get Kenny
FOUND: rip
HM> get Tweak
NOT FOUND
HM> put Token bassist
HM> print
        Kyle : lonely
     Butters : drchaos
        Stan : in-love
        Eric : big-boned
       Kenny : rip
       Token : bassist
        Chef : disavowed
HM> quit
#+END_SRC

* load file with larger array
** Create file to load
Place the below text in the named file to create a file to load.
#+BEGIN_QUOTE test-results/sp2.tmp
11 8
     Butters : drchaos
        Kyle : lonely
        Eric : big-boned
       Kenny : rip
        Chef : disavowed
        Stan : in-love
        Bebe : fashionable
       Tweak : spastic
#+END_QUOTE

** Load file and show structure
Loads the freshly created file test-results/sp2.tmp and shows the
structure that it has. This hashmap has an internal table of size 11
rather than the default 5 so it is checked that the table size in the
file is honored.

#+BEGIN_SRC sh
Hashmap Main
Commands:
  hashcode <key>   : prints out the numeric hash code for the given key (does not change the hash map)
  put <key> <val>  : inserts the given key/val into the hash map, overwrites existing values if present
  get <key>        : prints the value associated with the given key or NOT FOUND
  print            : shows contents of the hashmap ordered by how they appear in the table
  structure        : prints detailed structure of the hash map
  clear            : reinitializes hash map to be empty with default size
  save <file>      : writes the contents of the hash map the given file
  load <file>      : clears the current hash map and loads the one in the given file
  next_prime <int> : if <int> is prime, prints it, otherwise finds the next prime and prints it
  expand           : expands memory size of hashmap to reduce its load factor
  quit             : exit the program
HM> load test-results/sp2.tmp
HM> print
     Butters : drchaos
        Kyle : lonely
        Eric : big-boned
       Kenny : rip
        Chef : disavowed
        Stan : in-love
        Bebe : fashionable
       Tweak : spastic
HM> structure
item_count: 8
table_size: 11
load_factor: 0.7273
  0 : {(32495402392778050) Butters : drchaos} 
  1 : {(1701607755) Kyle : lonely} 
  2 : 
  3 : {(1667854917) Eric : big-boned} 
  4 : {(521543771467) Kenny : rip} 
  5 : {(1717921859) Chef : disavowed} 
  6 : {(1851880531) Stan : in-love} 
  7 : {(1700947266) Bebe : fashionable} 
  8 : {(461195540308) Tweak : spastic} 
  9 : 
 10 : 
HM> quit
#+END_SRC

* load fails
Creates a small hashmap then attempts to load a file that doesn't
exist. This should print error messages and leave the existing hashmap
intact allowing it to be modified subsequently.

#+BEGIN_SRC sh
Hashmap Main
Commands:
  hashcode <key>   : prints out the numeric hash code for the given key (does not change the hash map)
  put <key> <val>  : inserts the given key/val into the hash map, overwrites existing values if present
  get <key>        : prints the value associated with the given key or NOT FOUND
  print            : shows contents of the hashmap ordered by how they appear in the table
  structure        : prints detailed structure of the hash map
  clear            : reinitializes hash map to be empty with default size
  save <file>      : writes the contents of the hash map the given file
  load <file>      : clears the current hash map and loads the one in the given file
  next_prime <int> : if <int> is prime, prints it, otherwise finds the next prime and prints it
  expand           : expands memory size of hashmap to reduce its load factor
  quit             : exit the program
HM> put A 1
HM> put B 2
HM> put C 3
HM> print
           A : 1
           B : 2
           C : 3
HM> load test-results/no-such-file.tmp
ERROR: could not open file 'test-results/no-such-file.tmp'
load failed
HM> print
           A : 1
           B : 2
           C : 3
HM> put D 4
HM> put E 5
HM> print
           A : 1
           B : 2
           C : 3
           D : 4
           E : 5
HM> quit
#+END_SRC


* saving and loading
Employs the 'load' command to restore a saved hashmap. Ensures that
the data looks appropriate after the 'load' completes. Also checks
that attempts to load a non-existent file fail, print an error
message, and do not alter the hash table that already exists.

#+BEGIN_SRC sh
Hashmap Main
Commands:
  hashcode <key>   : prints out the numeric hash code for the given key (does not change the hash map)
  put <key> <val>  : inserts the given key/val into the hash map, overwrites existing values if present
  get <key>        : prints the value associated with the given key or NOT FOUND
  print            : shows contents of the hashmap ordered by how they appear in the table
  structure        : prints detailed structure of the hash map
  clear            : reinitializes hash map to be empty with default size
  save <file>      : writes the contents of the hash map the given file
  load <file>      : clears the current hash map and loads the one in the given file
  next_prime <int> : if <int> is prime, prints it, otherwise finds the next prime and prints it
  expand           : expands memory size of hashmap to reduce its load factor
  quit             : exit the program
HM> put A 1
HM> put E 2
HM> put C 3
HM> put D 4
HM> save test-results/save-load.tmp
HM> clear
HM> print
HM> load test-results/save-load.tmp
HM> print
           A : 1
           C : 3
           D : 4
           E : 2
HM> structure
item_count: 4
table_size: 5
load_factor: 0.8000
  0 : {(65) A : 1} 
  1 : 
  2 : {(67) C : 3} 
  3 : {(68) D : 4} 
  4 : {(69) E : 2} 
HM> get E
FOUND: 2
HM> get R
NOT FOUND
HM> get A
FOUND: 1
HM> put R 5
HM> put S 6
HM> print
           A : 1
           C : 3
           R : 5
           D : 4
           S : 6
           E : 2
HM> structure
item_count: 6
table_size: 5
load_factor: 1.2000
  0 : {(65) A : 1} 
  1 : 
  2 : {(67) C : 3} {(82) R : 5} 
  3 : {(68) D : 4} {(83) S : 6} 
  4 : {(69) E : 2} 
HM> get R
FOUND: 5
HM> get S
FOUND: 6
HM> load test-results/save-load.tmp
HM> print
           A : 1
           C : 3
           D : 4
           E : 2
HM> structure
item_count: 4
table_size: 5
load_factor: 0.8000
  0 : {(65) A : 1} 
  1 : 
  2 : {(67) C : 3} 
  3 : {(68) D : 4} 
  4 : {(69) E : 2} 
HM> get R
NOT FOUND
HM> get S
NOT FOUND
HM> load test-results/not-there.tmp
ERROR: could not open file 'test-results/not-there.tmp'
load failed
HM> print
           A : 1
           C : 3
           D : 4
           E : 2
HM> quit
#+END_SRC

* next_prime command
Checks that the 'next_prime' command works properly. 
#+BEGIN_SRC sh
Hashmap Main
Commands:
  hashcode <key>   : prints out the numeric hash code for the given key (does not change the hash map)
  put <key> <val>  : inserts the given key/val into the hash map, overwrites existing values if present
  get <key>        : prints the value associated with the given key or NOT FOUND
  print            : shows contents of the hashmap ordered by how they appear in the table
  structure        : prints detailed structure of the hash map
  clear            : reinitializes hash map to be empty with default size
  save <file>      : writes the contents of the hash map the given file
  load <file>      : clears the current hash map and loads the one in the given file
  next_prime <int> : if <int> is prime, prints it, otherwise finds the next prime and prints it
  expand           : expands memory size of hashmap to reduce its load factor
  quit             : exit the program
HM> next_prime 5
5
HM> next_prime 6
7
HM> next_prime 10
11
HM> next_prime 25
29
HM> next_prime 1024
1031
#+TESTY_EOF:
HM> 
#+END_SRC

* expand command
Checks that 'expand' grows the size of the internal array used in the
hashmap correctly. This requires use of the 'next_prime' functionality.
#+BEGIN_SRC sh
Hashmap Main
Commands:
  hashcode <key>   : prints out the numeric hash code for the given key (does not change the hash map)
  put <key> <val>  : inserts the given key/val into the hash map, overwrites existing values if present
  get <key>        : prints the value associated with the given key or NOT FOUND
  print            : shows contents of the hashmap ordered by how they appear in the table
  structure        : prints detailed structure of the hash map
  clear            : reinitializes hash map to be empty with default size
  save <file>      : writes the contents of the hash map the given file
  load <file>      : clears the current hash map and loads the one in the given file
  next_prime <int> : if <int> is prime, prints it, otherwise finds the next prime and prints it
  expand           : expands memory size of hashmap to reduce its load factor
  quit             : exit the program
HM> put A 1
HM> put B 2
HM> put C 3
HM> put D 4
HM> put E 5
HM> put F 6
HM> put G 7
HM> print
           A : 1
           F : 6
           B : 2
           G : 7
           C : 3
           D : 4
           E : 5
HM> structure
item_count: 7
table_size: 5
load_factor: 1.4000
  0 : {(65) A : 1} {(70) F : 6} 
  1 : {(66) B : 2} {(71) G : 7} 
  2 : {(67) C : 3} 
  3 : {(68) D : 4} 
  4 : {(69) E : 5} 
HM> expand
HM> print
           B : 2
           C : 3
           D : 4
           E : 5
           F : 6
           G : 7
           A : 1
HM> structure
item_count: 7
table_size: 11
load_factor: 0.6364
  0 : {(66) B : 2} 
  1 : {(67) C : 3} 
  2 : {(68) D : 4} 
  3 : {(69) E : 5} 
  4 : {(70) F : 6} 
  5 : {(71) G : 7} 
  6 : 
  7 : 
  8 : 
  9 : 
 10 : {(65) A : 1} 
HM> expand
HM> print
           E : 5
           F : 6
           G : 7
           A : 1
           B : 2
           C : 3
           D : 4
HM> structure
item_count: 7
table_size: 23
load_factor: 0.3043
  0 : {(69) E : 5} 
  1 : {(70) F : 6} 
  2 : {(71) G : 7} 
  3 : 
  4 : 
  5 : 
  6 : 
  7 : 
  8 : 
  9 : 
 10 : 
 11 : 
 12 : 
 13 : 
 14 : 
 15 : 
 16 : 
 17 : 
 18 : 
 19 : {(65) A : 1} 
 20 : {(66) B : 2} 
 21 : {(67) C : 3} 
 22 : {(68) D : 4} 
HM> clear
HM> put Kyle alive
HM> put Kenny dead
HM> put Stan alive
HM> put Cartman jerk
HM> put Timmy TIMMY!
HM> put MrGarrison odd
HM> put MrHat very-odd
HM> put Butters lovable
HM> put Chef disavowed
HM> print
        Kyle : alive
     Cartman : jerk
     Butters : lovable
        Stan : alive
       MrHat : very-odd
       Kenny : dead
  MrGarrison : odd
       Timmy : TIMMY!
        Chef : disavowed
HM> structure
item_count: 9
table_size: 5
load_factor: 1.8000
  0 : {(1701607755) Kyle : alive} {(31069370171154755) Cartman : jerk} {(32495402392778050) Butters : lovable} 
  1 : {(1851880531) Stan : alive} {(499848344141) MrHat : very-odd} 
  2 : {(521543771467) Kenny : dead} {(8316304022500241997) MrGarrison : odd} 
  3 : {(521526929748) Timmy : TIMMY!} 
  4 : {(1717921859) Chef : disavowed} 
HM> expand
HM> print
     Cartman : jerk
     Butters : lovable
       Timmy : TIMMY!
        Kyle : alive
       MrHat : very-odd
       Kenny : dead
        Chef : disavowed
        Stan : alive
  MrGarrison : odd
HM> structure
item_count: 9
table_size: 11
load_factor: 0.8182
  0 : {(31069370171154755) Cartman : jerk} {(32495402392778050) Butters : lovable} {(521526929748) Timmy : TIMMY!} 
  1 : {(1701607755) Kyle : alive} 
  2 : 
  3 : {(499848344141) MrHat : very-odd} 
  4 : {(521543771467) Kenny : dead} 
  5 : {(1717921859) Chef : disavowed} 
  6 : {(1851880531) Stan : alive} 
  7 : 
  8 : 
  9 : {(8316304022500241997) MrGarrison : odd} 
 10 : 
HM> put Token dude
HM> put Wendy gal
HM> put Jimmy crutches
HM> put Damien evil
HM> put Santa bad
HM> put Jesus good
HM> put Marvin starvin
HM> print
     Cartman : jerk
     Butters : lovable
       Timmy : TIMMY!
       Santa : bad
        Kyle : alive
       Jimmy : crutches
       MrHat : very-odd
      Damien : evil
       Kenny : dead
       Token : dude
       Jesus : good
        Chef : disavowed
        Stan : alive
      Marvin : starvin
  MrGarrison : odd
       Wendy : gal
HM> structure
item_count: 16
table_size: 11
load_factor: 1.4545
  0 : {(31069370171154755) Cartman : jerk} {(32495402392778050) Butters : lovable} {(521526929748) Timmy : TIMMY!} {(418565218643) Santa : bad} 
  1 : {(1701607755) Kyle : alive} {(521526929738) Jimmy : crutches} 
  2 : 
  3 : {(499848344141) MrHat : very-odd} {(121381839528260) Damien : evil} 
  4 : {(521543771467) Kenny : dead} {(474147942228) Token : dude} {(495891735882) Jesus : good} 
  5 : {(1717921859) Chef : disavowed} 
  6 : {(1851880531) Stan : alive} {(121399237828941) Marvin : starvin} 
  7 : 
  8 : 
  9 : {(8316304022500241997) MrGarrison : odd} 
 10 : {(521375999319) Wendy : gal} 
HM> expand
HM> print
       Timmy : TIMMY!
       Santa : bad
      Marvin : starvin
      Damien : evil
       Wendy : gal
     Cartman : jerk
       Jimmy : crutches
       Kenny : dead
       Jesus : good
        Chef : disavowed
       MrHat : very-odd
     Butters : lovable
        Stan : alive
  MrGarrison : odd
        Kyle : alive
       Token : dude
HM> structure
item_count: 16
table_size: 23
load_factor: 0.6957
  0 : 
  1 : 
  2 : {(521526929748) Timmy : TIMMY!} {(418565218643) Santa : bad} {(121399237828941) Marvin : starvin} 
  3 : 
  4 : 
  5 : 
  6 : 
  7 : 
  8 : 
  9 : {(121381839528260) Damien : evil} 
 10 : 
 11 : 
 12 : {(521375999319) Wendy : gal} 
 13 : {(31069370171154755) Cartman : jerk} 
 14 : 
 15 : {(521526929738) Jimmy : crutches} 
 16 : 
 17 : {(521543771467) Kenny : dead} {(495891735882) Jesus : good} {(1717921859) Chef : disavowed} 
 18 : {(499848344141) MrHat : very-odd} 
 19 : {(32495402392778050) Butters : lovable} {(1851880531) Stan : alive} {(8316304022500241997) MrGarrison : odd} 
 20 : {(1701607755) Kyle : alive} 
 21 : 
 22 : {(474147942228) Token : dude} 
HM> expand
HM> print
       Jimmy : crutches
       Timmy : TIMMY!
        Kyle : alive
     Butters : lovable
     Cartman : jerk
        Stan : alive
       Wendy : gal
       Jesus : good
      Damien : evil
  MrGarrison : odd
       Kenny : dead
      Marvin : starvin
       Santa : bad
        Chef : disavowed
       MrHat : very-odd
       Token : dude
HM> structure
item_count: 16
table_size: 47
load_factor: 0.3404
  0 : {(521526929738) Jimmy : crutches} 
  1 : 
  2 : 
  3 : 
  4 : 
  5 : 
  6 : 
  7 : 
  8 : 
  9 : 
 10 : {(521526929748) Timmy : TIMMY!} 
 11 : 
 12 : 
 13 : 
 14 : 
 15 : {(1701607755) Kyle : alive} 
 16 : 
 17 : 
 18 : 
 19 : {(32495402392778050) Butters : lovable} 
 20 : {(31069370171154755) Cartman : jerk} {(1851880531) Stan : alive} 
 21 : 
 22 : 
 23 : {(521375999319) Wendy : gal} {(495891735882) Jesus : good} 
 24 : {(121381839528260) Damien : evil} 
 25 : 
 26 : {(8316304022500241997) MrGarrison : odd} 
 27 : 
 28 : 
 29 : 
 30 : 
 31 : {(521543771467) Kenny : dead} 
 32 : 
 33 : 
 34 : 
 35 : {(121399237828941) Marvin : starvin} 
 36 : 
 37 : 
 38 : 
 39 : 
 40 : {(418565218643) Santa : bad} 
 41 : 
 42 : 
 43 : {(1717921859) Chef : disavowed} 
 44 : {(499848344141) MrHat : very-odd} 
 45 : {(474147942228) Token : dude} 
 46 : 
#+TESTY_EOF:
HM> 
#+END_SRC

* stress testing
Utilizes all of the capabilities of the hash table repeatedly to
check that they function correctly in concert.

#+BEGIN_SRC sh
Hashmap Main
Commands:
  hashcode <key>   : prints out the numeric hash code for the given key (does not change the hash map)
  put <key> <val>  : inserts the given key/val into the hash map, overwrites existing values if present
  get <key>        : prints the value associated with the given key or NOT FOUND
  print            : shows contents of the hashmap ordered by how they appear in the table
  structure        : prints detailed structure of the hash map
  clear            : reinitializes hash map to be empty with default size
  save <file>      : writes the contents of the hash map the given file
  load <file>      : clears the current hash map and loads the one in the given file
  next_prime <int> : if <int> is prime, prints it, otherwise finds the next prime and prints it
  expand           : expands memory size of hashmap to reduce its load factor
  quit             : exit the program
HM> put Kyle alive
HM> put Kenny dead
HM> put Stan alive
HM> put Cartman jerk
HM> put Timmy TIMMY!
HM> put MrGarrison odd
HM> put MrHat very-odd
HM> put Butters lovable
HM> put Chef disavowed
HM> structure
item_count: 9
table_size: 5
load_factor: 1.8000
  0 : {(1701607755) Kyle : alive} {(31069370171154755) Cartman : jerk} {(32495402392778050) Butters : lovable} 
  1 : {(1851880531) Stan : alive} {(499848344141) MrHat : very-odd} 
  2 : {(521543771467) Kenny : dead} {(8316304022500241997) MrGarrison : odd} 
  3 : {(521526929748) Timmy : TIMMY!} 
  4 : {(1717921859) Chef : disavowed} 
HM> expand
HM> structure
item_count: 9
table_size: 11
load_factor: 0.8182
  0 : {(31069370171154755) Cartman : jerk} {(32495402392778050) Butters : lovable} {(521526929748) Timmy : TIMMY!} 
  1 : {(1701607755) Kyle : alive} 
  2 : 
  3 : {(499848344141) MrHat : very-odd} 
  4 : {(521543771467) Kenny : dead} 
  5 : {(1717921859) Chef : disavowed} 
  6 : {(1851880531) Stan : alive} 
  7 : 
  8 : 
  9 : {(8316304022500241997) MrGarrison : odd} 
 10 : 
HM> save test-results/stress1.tmp
HM> put Token dude
HM> put Wendy gal
HM> put Jimmy crutches
HM> put Damien evil
HM> put Santa bad
HM> put Jesus good
HM> put Marvin starvin
HM> put Kenny ALIVE
Overwriting previous key/val
HM> put MrHat MrStick
Overwriting previous key/val
HM> structure
item_count: 16
table_size: 11
load_factor: 1.4545
  0 : {(31069370171154755) Cartman : jerk} {(32495402392778050) Butters : lovable} {(521526929748) Timmy : TIMMY!} {(418565218643) Santa : bad} 
  1 : {(1701607755) Kyle : alive} {(521526929738) Jimmy : crutches} 
  2 : 
  3 : {(499848344141) MrHat : MrStick} {(121381839528260) Damien : evil} 
  4 : {(521543771467) Kenny : ALIVE} {(474147942228) Token : dude} {(495891735882) Jesus : good} 
  5 : {(1717921859) Chef : disavowed} 
  6 : {(1851880531) Stan : alive} {(121399237828941) Marvin : starvin} 
  7 : 
  8 : 
  9 : {(8316304022500241997) MrGarrison : odd} 
 10 : {(521375999319) Wendy : gal} 
HM> expand
HM> expand
HM> structure
item_count: 16
table_size: 47
load_factor: 0.3404
  0 : {(521526929738) Jimmy : crutches} 
  1 : 
  2 : 
  3 : 
  4 : 
  5 : 
  6 : 
  7 : 
  8 : 
  9 : 
 10 : {(521526929748) Timmy : TIMMY!} 
 11 : 
 12 : 
 13 : 
 14 : 
 15 : {(1701607755) Kyle : alive} 
 16 : 
 17 : 
 18 : 
 19 : {(32495402392778050) Butters : lovable} 
 20 : {(31069370171154755) Cartman : jerk} {(1851880531) Stan : alive} 
 21 : 
 22 : 
 23 : {(521375999319) Wendy : gal} {(495891735882) Jesus : good} 
 24 : {(121381839528260) Damien : evil} 
 25 : 
 26 : {(8316304022500241997) MrGarrison : odd} 
 27 : 
 28 : 
 29 : 
 30 : 
 31 : {(521543771467) Kenny : ALIVE} 
 32 : 
 33 : 
 34 : 
 35 : {(121399237828941) Marvin : starvin} 
 36 : 
 37 : 
 38 : 
 39 : 
 40 : {(418565218643) Santa : bad} 
 41 : 
 42 : 
 43 : {(1717921859) Chef : disavowed} 
 44 : {(499848344141) MrHat : MrStick} 
 45 : {(474147942228) Token : dude} 
 46 : 
HM> save test-results/stress2.tmp
HM> load test-results/stress1.tmp
HM> structure
item_count: 9
table_size: 11
load_factor: 0.8182
  0 : {(31069370171154755) Cartman : jerk} {(32495402392778050) Butters : lovable} {(521526929748) Timmy : TIMMY!} 
  1 : {(1701607755) Kyle : alive} 
  2 : 
  3 : {(499848344141) MrHat : very-odd} 
  4 : {(521543771467) Kenny : dead} 
  5 : {(1717921859) Chef : disavowed} 
  6 : {(1851880531) Stan : alive} 
  7 : 
  8 : 
  9 : {(8316304022500241997) MrGarrison : odd} 
 10 : 
HM> get Santa
NOT FOUND
HM> get Marvin
NOT FOUND
HM> get Cartman
FOUND: jerk
HM> get MrHat
FOUND: very-odd
HM> put Syndney Portier
HM> put Robert Smith
HM> expand
HM> expand
HM> expand
HM> structure
item_count: 11
table_size: 97
load_factor: 0.1134
  0 : 
  1 : 
  2 : 
  3 : {(521543771467) Kenny : dead} 
  4 : 
  5 : 
  6 : {(521526929748) Timmy : TIMMY!} 
  7 : 
  8 : 
  9 : 
 10 : 
 11 : 
 12 : 
 13 : 
 14 : 
 15 : {(32495402392778050) Butters : lovable} 
 16 : 
 17 : 
 18 : 
 19 : 
 20 : 
 21 : 
 22 : 
 23 : 
 24 : 
 25 : 
 26 : 
 27 : 
 28 : 
 29 : 
 30 : 
 31 : 
 32 : 
 33 : {(8316304022500241997) MrGarrison : odd} 
 34 : 
 35 : 
 36 : 
 37 : 
 38 : 
 39 : 
 40 : 
 41 : 
 42 : 
 43 : 
 44 : 
 45 : 
 46 : 
 47 : 
 48 : 
 49 : 
 50 : 
 51 : 
 52 : 
 53 : 
 54 : 
 55 : {(128034676043602) Robert : Smith} 
 56 : 
 57 : 
 58 : 
 59 : 
 60 : 
 61 : {(1717921859) Chef : disavowed} 
 62 : 
 63 : {(31069370171154755) Cartman : jerk} 
 64 : 
 65 : 
 66 : 
 67 : 
 68 : 
 69 : 
 70 : 
 71 : 
 72 : 
 73 : 
 74 : {(34169996987758931) Syndney : Portier} 
 75 : 
 76 : 
 77 : {(499848344141) MrHat : very-odd} 
 78 : 
 79 : 
 80 : 
 81 : 
 82 : 
 83 : 
 84 : {(1851880531) Stan : alive} 
 85 : 
 86 : 
 87 : 
 88 : 
 89 : 
 90 : 
 91 : 
 92 : 
 93 : 
 94 : 
 95 : 
 96 : {(1701607755) Kyle : alive} 
HM> get Cartman
FOUND: jerk
HM> get Robert
FOUND: Smith
HM> save test-results/stress3.tmp
HM> load test-results/stress2.tmp
HM> print
       Jimmy : crutches
       Timmy : TIMMY!
        Kyle : alive
     Butters : lovable
     Cartman : jerk
        Stan : alive
       Wendy : gal
       Jesus : good
      Damien : evil
  MrGarrison : odd
       Kenny : ALIVE
      Marvin : starvin
       Santa : bad
        Chef : disavowed
       MrHat : MrStick
       Token : dude
HM> structure
item_count: 16
table_size: 47
load_factor: 0.3404
  0 : {(521526929738) Jimmy : crutches} 
  1 : 
  2 : 
  3 : 
  4 : 
  5 : 
  6 : 
  7 : 
  8 : 
  9 : 
 10 : {(521526929748) Timmy : TIMMY!} 
 11 : 
 12 : 
 13 : 
 14 : 
 15 : {(1701607755) Kyle : alive} 
 16 : 
 17 : 
 18 : 
 19 : {(32495402392778050) Butters : lovable} 
 20 : {(31069370171154755) Cartman : jerk} {(1851880531) Stan : alive} 
 21 : 
 22 : 
 23 : {(521375999319) Wendy : gal} {(495891735882) Jesus : good} 
 24 : {(121381839528260) Damien : evil} 
 25 : 
 26 : {(8316304022500241997) MrGarrison : odd} 
 27 : 
 28 : 
 29 : 
 30 : 
 31 : {(521543771467) Kenny : ALIVE} 
 32 : 
 33 : 
 34 : 
 35 : {(121399237828941) Marvin : starvin} 
 36 : 
 37 : 
 38 : 
 39 : 
 40 : {(418565218643) Santa : bad} 
 41 : 
 42 : 
 43 : {(1717921859) Chef : disavowed} 
 44 : {(499848344141) MrHat : MrStick} 
 45 : {(474147942228) Token : dude} 
 46 : 
HM> get MrGarrison
FOUND: odd
HM> get MrHat
FOUND: MrStick
HM> get Kenny
FOUND: ALIVE
HM> get Santa
FOUND: bad
HM> get Wendy
FOUND: gal
HM> get Marvin
FOUND: starvin
HM> get Sydney
NOT FOUND
HM> put Kenny dead
Overwriting previous key/val
HM> load test-results/stress3.tmp
HM> get Kenny
FOUND: dead
HM> structure
item_count: 11
table_size: 97
load_factor: 0.1134
  0 : 
  1 : 
  2 : 
  3 : {(521543771467) Kenny : dead} 
  4 : 
  5 : 
  6 : {(521526929748) Timmy : TIMMY!} 
  7 : 
  8 : 
  9 : 
 10 : 
 11 : 
 12 : 
 13 : 
 14 : 
 15 : {(32495402392778050) Butters : lovable} 
 16 : 
 17 : 
 18 : 
 19 : 
 20 : 
 21 : 
 22 : 
 23 : 
 24 : 
 25 : 
 26 : 
 27 : 
 28 : 
 29 : 
 30 : 
 31 : 
 32 : 
 33 : {(8316304022500241997) MrGarrison : odd} 
 34 : 
 35 : 
 36 : 
 37 : 
 38 : 
 39 : 
 40 : 
 41 : 
 42 : 
 43 : 
 44 : 
 45 : 
 46 : 
 47 : 
 48 : 
 49 : 
 50 : 
 51 : 
 52 : 
 53 : 
 54 : 
 55 : {(128034676043602) Robert : Smith} 
 56 : 
 57 : 
 58 : 
 59 : 
 60 : 
 61 : {(1717921859) Chef : disavowed} 
 62 : 
 63 : {(31069370171154755) Cartman : jerk} 
 64 : 
 65 : 
 66 : 
 67 : 
 68 : 
 69 : 
 70 : 
 71 : 
 72 : 
 73 : 
 74 : {(34169996987758931) Syndney : Portier} 
 75 : 
 76 : 
 77 : {(499848344141) MrHat : very-odd} 
 78 : 
 79 : 
 80 : 
 81 : 
 82 : 
 83 : 
 84 : {(1851880531) Stan : alive} 
 85 : 
 86 : 
 87 : 
 88 : 
 89 : 
 90 : 
 91 : 
 92 : 
 93 : 
 94 : 
 95 : 
 96 : {(1701607755) Kyle : alive} 
HM> expand
HM> structure
item_count: 11
table_size: 197
load_factor: 0.0558
  0 : 
  1 : 
  2 : 
  3 : {(521543771467) Kenny : dead} 
  4 : 
  5 : 
  6 : 
  7 : 
  8 : 
  9 : 
 10 : 
 11 : {(521526929748) Timmy : TIMMY!} 
 12 : 
 13 : 
 14 : 
 15 : 
 16 : 
 17 : 
 18 : 
 19 : 
 20 : 
 21 : 
 22 : 
 23 : 
 24 : 
 25 : 
 26 : 
 27 : 
 28 : 
 29 : 
 30 : 
 31 : 
 32 : 
 33 : 
 34 : 
 35 : 
 36 : 
 37 : 
 38 : 
 39 : 
 40 : 
 41 : 
 42 : 
 43 : 
 44 : 
 45 : 
 46 : 
 47 : 
 48 : 
 49 : 
 50 : 
 51 : 
 52 : 
 53 : 
 54 : 
 55 : 
 56 : 
 57 : 
 58 : {(499848344141) MrHat : very-odd} 
 59 : {(128034676043602) Robert : Smith} 
 60 : 
 61 : 
 62 : 
 63 : 
 64 : 
 65 : 
 66 : 
 67 : 
 68 : 
 69 : 
 70 : 
 71 : 
 72 : 
 73 : 
 74 : 
 75 : 
 76 : 
 77 : {(34169996987758931) Syndney : Portier} 
 78 : 
 79 : 
 80 : 
 81 : 
 82 : {(8316304022500241997) MrGarrison : odd} 
 83 : 
 84 : 
 85 : 
 86 : 
 87 : 
 88 : 
 89 : 
 90 : 
 91 : 
 92 : {(32495402392778050) Butters : lovable} 
 93 : 
 94 : 
 95 : 
 96 : 
 97 : 
 98 : 
 99 : 
100 : 
101 : 
102 : 
103 : 
104 : {(1717921859) Chef : disavowed} 
105 : 
106 : 
107 : 
108 : 
109 : 
110 : 
111 : 
112 : 
113 : 
114 : 
115 : 
116 : 
117 : 
118 : 
119 : 
120 : 
121 : 
122 : 
123 : 
124 : 
125 : 
126 : 
127 : 
128 : 
129 : 
130 : 
131 : 
132 : 
133 : 
134 : 
135 : 
136 : 
137 : 
138 : 
139 : 
140 : 
141 : 
142 : 
143 : 
144 : 
145 : 
146 : 
147 : 
148 : 
149 : 
150 : 
151 : 
152 : 
153 : 
154 : 
155 : {(1851880531) Stan : alive} 
156 : 
157 : 
158 : 
159 : 
160 : 
161 : {(1701607755) Kyle : alive} 
162 : 
163 : 
164 : 
165 : 
166 : 
167 : 
168 : {(31069370171154755) Cartman : jerk} 
169 : 
170 : 
171 : 
172 : 
173 : 
174 : 
175 : 
176 : 
177 : 
178 : 
179 : 
180 : 
181 : 
182 : 
183 : 
184 : 
185 : 
186 : 
187 : 
188 : 
189 : 
190 : 
191 : 
192 : 
193 : 
194 : 
195 : 
196 : 
HM> quit
#+END_SRC

#+RESULTS:
